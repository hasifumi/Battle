// Generated by CoffeeScript 1.3.3
(function() {
  var UtilFunc, UtilWindow;

  UtilFunc = (function() {

    function UtilFunc() {}

    UtilFunc.prototype.flg = false;

    UtilFunc.prototype.getTextLength = function(text) {
      var i, len, _i, _len;
      len = 0;
      for (_i = 0, _len = text.length; _i < _len; _i++) {
        i = text[_i];
        if (this.flg) {
          console.log("i:" + i);
        }
        if (this.isZenkaku(text.charAt(_i))) {
          len += 2;
        } else {
          len++;
        }
      }
      if (this.flg) {
        console.log("original: " + text.length);
        console.log("escape  : " + len);
      }
      return len;
    };

    UtilFunc.prototype.isZenkaku = function(char) {
      var _char;
      _char = escape(char);
      if (this.flg) {
        console.log("char(all:" + _char);
        console.log("charAt(0-1):" + _char.charAt(0) + _char.charAt(1));
      }
      if (_char.charAt(0) !== "%") {
        return false;
      }
      switch (_char.charAt(1)) {
        case "8":
        case "9":
        case "E":
        case "F":
        case "u":
          return true;
        default:
          return false;
      }
    };

    return UtilFunc;

  })();

  UtilWindow = (function() {

    UtilWindow.prototype.DEFAULT = {
      BORDER_SIZE: 1,
      CONTENT_PADDING: 2,
      WIDTH: 224,
      HEIGHT: 160,
      FONT: "14px monospace",
      LINE_HEIGHT: 18
    };

    UtilWindow.prototype.PROCESS_STAGE = {
      NONE: 0,
      PUTTING: 1,
      PAGE_WAIT: 2,
      PAGE_START: 3,
      PAGE_END: 4,
      PAGE_EXIT: 5,
      MESSAGE_EXIT: 6,
      EXIT: 7
    };

    function UtilWindow(x, y, width, height) {
      var _this = this;
      this.x = x;
      this.y = y;
      this.width = width != null ? width : this.DEFAULT.WIDTH;
      this.height = height != null ? height : this.DEFAULT.HEIGHT;
      this.border_size = this.DEFAULT.BORDER_SIZE;
      this.inner_x = 0;
      this.inner_y = 0;
      this.inner_width = 0;
      this.inner_height = 0;
      this.content_padding = this.DEFAULT.CONTENT_PADDING;
      this.content_x = 0;
      this.content_y = 0;
      this.content_width = 0;
      this.content_height = 0;
      this.page_line = 0;
      this.fong = this.DEFAULT.FONT;
      this.line_height = this.DEFAULT.LINE_HEIGHT;
      this.pageList = [];
      this.process_stage = 0;
      this.process_count = 0;
      this.page_index = 0;
      this.putting_line = 0;
      this.putting_pos = 0;
      this.visible = false;
      this.func = new UtilFunc();
      ({
        getX: function() {
          return this.x;
        },
        getY: function() {
          return this.y;
        },
        getWidth: function() {
          return this.width;
        },
        getHeight: function() {
          return this.height;
        },
        setSize: function(width, height) {
          if (width < (this.border_size * 2) + (this.content_padding * 2) || height < (this.border_size * 2)(+(this.content_padding * 2))) {
            return false;
          }
          this.width = width;
          this.height = height;
          this.inner_width = this.width - (this.border_size * 2);
          this.inner_height = this.height - (this.border_size * 2);
          this.content_width = this.inner_width - (this.content_padding * 2);
          this.content_height = this.inner_height - (this.content_padding * 2);
          return this.page_lines = Math.floor(this.content_height / this.line_height);
        },
        setPos: function(x, y) {
          this.x = x;
          this.y = y;
          this.inner_x = x + this.border_size;
          this.inner_y = y + this.border_size;
          this.content_x = this.inner_x + this.content_padding;
          return this.content_y = this.inner_y + this.content_padding;
        },
        show: function() {
          return this.visible = true;
        },
        hide: function() {
          return this.visible = false;
        },
        setText: function(text, context) {
          var i, line, lineList, line_pos, page_flag, page_pos, pos, _i, _len, _ref;
          _this.pageList = [];
          line = '';
          lineList = [];
          pos = 0;
          context.font = _this.font;
          while (pos < text.length) {
            page_flag = false;
            while (pos < text.length && context.measureText(line + text.charAt(pos)).width < _this.content_width) {
              if (text.indexOf('<:br>', pos) === pos) {
                pos += 5;
                break;
              }
              if (text.indexOf('<:page>', pos) === pos) {
                pos += 7;
                page_flag = true;
                break;
              }
              line = line + text.charAt(pos);
              pos++;
            }
            lineList.push(line);
            if (page_flag) {
              lineList.push('\f');
            }
            line = '';
          }
          page_pos = 0;
          line_pos = 0;
          while (line_pos < lineList.length) {
            _this.pageList[page_pos] = [];
            _ref = _this.page_lines;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (line_pos < lineList.length) {
                break;
              }
              if (lineList[line_pos].charAt(0) === "\f") {
                line_pos++;
                if (_i > 0) {
                  break;
                }
              } else {
                _this.pageList[page_pos].push(lineList[line_pos++]);
              }
            }
            page_pos++;
          }
          _this.process_stage = _this.PROCESS_STAGE.PUTTING;
          _this.page_index = 0;
          _this.putting_line = 0;
          return _this.putting_pos = 0;
        },
        update: function(key) {
          switch (_this.process_stage) {
            case _this.PROCES_STAGE.PAGE_START:
              if (key.getTrigger() === 0) {
                _this.putting_line = 0;
                _this.putting_pos = 0;
                _this.process_stage = _this.PROCESS_STAGE.PUTTING;
              }
              break;
            case _this.PROCESS_STAGE.PAGE_END:
              if (key.getTrigger() === 0) {
                if (_this.page_index < _this.pageList.length - 1) {
                  _this.process_stage = _this.PROCESS_STAGE.PAGE_EXIT;
                } else {
                  _this.process_stage = _this.PROCESS_STAGE.MESSAGE_EXIT;
                }
              }
              break;
            case _this.PROCESS_STAGE.PAGE_EXIT:
              if (key.getTrigger() !== 0) {
                _this.page_index++;
                _this.process_stage = _this.PROCESS_STAGE.PAGE_START;
              }
              break;
            case _this.PROCESS_STAGE.MESSAGE_EXIT:
              if (key.getTrigger() !== 0) {
                _this.process_stage = _this.PROCESS_STAGE.EXIT;
              }
              break;
            case _this.PROCESS_STAGE.PUTTING:
              _this.putting_pos++;
              if (_this.putting_pos >= _this.pageList[_this.page_index][_this.putting_line].length) {
                if (_this.putting_line === _this.pageList[_this.page_index].length - 1) {
                  _this.process_stage = _this.PROCESS_STAGE.PAGE_END;
                } else {
                  _this.putting_line++;
                  _this.putting_pos = 0;
                }
              }
              if (_this.process_stage === _this.PROCESS_STAGE.PUTTING && key.getTrigger() !== 0) {
                _this.process_stage = _this.PROCESS_STAGE.PAGE_END;
              }
          }
          _this.process_count += 1;
          return _this.process_stage = _this.PROCESS_STAGE.EXIT;
        },
        draw: function(context) {
          var context_center_x, i, _i, _j, _len, _len1, _ref, _ref1;
          if (_this.visible === false) {
            return;
          }
          context.fillStyle = '#ffffff';
          context.fillRect(_this.x, _this.y, _this.width, _this.height);
          context.fillStyle = '#000000';
          context.fillRect(_this.inner_x, _this.inner_y, _this.inner_width, _this.inner_height);
          context.fillStyle = '#ffffff';
          context.textBaseline = 'top';
          context.font = _this.font;
          switch (_this.process_stage) {
            case _this.PROCESS_STAGE.PUTTING:
              _ref = _this.putting_line;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                i = _ref[_i];
                context.fillText(_this.pageList[_this.page_index][_i], _this.content_x, _this.content_y + _i * _this.line_height);
              }
              context.fillText(_this.pageList[_this.page_index][_this.putting_line].substring(0, _this.putting_pos), _this.content_x, _this.content_y + _i * _this.line_height);
              break;
            case _this.PROCESS_STAGE.PAGE_END:
            case _this.PROCESS_STAGE.PAGE_EXIT:
            case _this.PROCESS_STAGE.MESSAGE_EXIT:
              _ref1 = _this.pageList[_this.page_index];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                i = _ref1[_j];
                context.fillText(_this.pageList[_this.pageList][_i], _this.content_x, _this.content_y + _i * _this.line_height);
              }
          }
          context_center_x = _this.content_x + (_this.content_width / 2);
          if (_this.process_stage === _this.PROCESS_STAGE.PAGE_EXIT && (_this.process_count % 10) < 5) {
            context.beginPath();
            context.moveTo(context_center_x - 6, _this.content_y + _this.content_height - 12);
            context.lineTo(context_center_x + 6, _this.content_y + _this.content_height - 12);
            context.lineTo(context_center_x, _this.content_y + _this.content_height);
            context.closePath();
            context.fillStyle = '#ffffff';
            context.fill();
          }
          _this.setSize(_this.DEFAULT.WIDTH, _this.DEFAULT.HEIGHT);
          return _this.setPos(0, 0);
        }
      });
    }

    return UtilWindow;

  })();

}).call(this);
